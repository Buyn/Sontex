:PROPERTIES:
:header-args: :tangle sandbox.py
:END:
* 2025-04-16 populate and calc
* DONE 2025-04-15 global values change
CLOSED: [2025-04-15 Tue 03:25]
*** import
import pandas as pd
#+begin_src python 
from global_values import *
from main import *
#+end_src
*** get value
#+begin_src python
# gk_Qfun_sys = 0.05
# gk_Qmzk = 0.1
print("befor gk_Qfun_sys=", gk_Qfun_sys)
print("befor gk_Qmzk=", gk_Qmzk)


#+end_src

*** func 01
#+begin_src python
def fun01():
  global gk_Qfun_sys, gk_Qmzk
  print("in fun 01 befor gk_Qfun_sys=", gk_Qfun_sys)
  print("in fun 01 befor gk_Qmzk=", gk_Qmzk)
  gk_Qfun_sys = 1
  gk_Qmzk = 1
  print("in fun 01 befor gk_Qfun_sys=", gk_Qfun_sys)
  print("in fun 01 befor gk_Qmzk=", gk_Qmzk)

fun01()
print("after 01 gk_Qfun_sys=", gk_Qfun_sys)
print("after 01 gk_Qmzk=", gk_Qmzk)

#+end_src

*** get value after fun 01
#+begin_src python
# gk_Qfun_sys = 0.05
# gk_Qmzk = 0.1
print("befor gk_Qfun_sys=", gk_Qfun_sys)
print("befor gk_Qmzk=", gk_Qmzk)


#+end_src

*** func 02
#+begin_src python
def fun02():
  global gk_Qfun_sys, gk_Qmzk
  print("in fun 02 befor gk_Qfun_sys=", gk_Qfun_sys)
  print("in fun 02 befor gk_Qmzk=", gk_Qmzk)
  gk_Qfun_sys = 0.11
  gk_Qmzk = 0.11
  print("in fun 02 befor gk_Qfun_sys=", gk_Qfun_sys)
  print("in fun 02 befor gk_Qmzk=", gk_Qmzk)

fun02()
fun01()
fun02()

#+end_src

* DONE 2025-03-19 1 cell on col of rvl
CLOSED: [2025-04-15 Tue 03:02]
:PROPERTIES:
:header-args: :tangle no
:END:
*** import
#+begin_src python 
import pandas as pd
from global_values import *
#+end_src
*** DONE load rvl
CLOSED: [2025-04-09 Wed 02:23]
#+begin_src python
# print("test hi!")
# filename = "/home/buyn/Dev/Python/Sontex/Src/Data_files/test.rlv"
filename = "Data_files/test.rlv"
# colmname1 = "Readout date"
# gv_rlv_name_date
# gv_rlv_Readout_date = "Readout date"
gv_rlv_name_start = 1
gv_rlv_name_end = 100
# gv_rlv_name_date_list = [gv_rlv_name_date + str(x)
#                               for x in range(
#                                   gv_rlv_name_start,
#                                   gv_rlv_name_end)]
# gv_rlv_colmus_list = [gv_rlv_Readout_date].append(gv_rlv_name_date_list)
gv_rlv_colums_name_dates_list = ["Readout date"] + [gv_rlv_name_date + str(x)
                              for x in range(gv_rlv_name_start, gv_rlv_name_end)]
gv_rlv_colums_name_values_list = ["Heating units totalizer"] + [gv_rlv_name_value + str(x)
                              for x in range(gv_rlv_name_start, gv_rlv_name_end)]

df = pd.read_csv(filename ,
                encoding = gv_rlv_encoding,
                header = gv_rlv_header,
                sep = gv_rlv_sep,
                index_col = gv_rlv_index_col)
#+end_src

*** DONE def get_dates_from_colums_list
CLOSED: [2025-04-08 Tue 20:30]
#+begin_src python 
def get_dates_from_colums_list(df, colist):
  retlist = []
  for i, name in enumerate(colist):
      try:
          colnum = df.columns.get_loc(name)
      except Exception as e:
          print ("on name=", name, " is Exception=", str(e))
          print("Possible reason - file does not contain the expected columns")
          break
      value = df.iloc[0, colnum]
      if pd.isnull(value): break
      retlist.append(value)
  return retlist


print(get_dates_from_colums_list(df, gv_rlv_colums_name_dates_list))

#+end_src

*** DONE def get_df_list_from_filename_string
CLOSED: [2025-04-08 Tue 14:31]
#+begin_src python
def get_df_from_filename_string(string):
  rdf=[]
  for path_csv in string.split(";"):
    if path_csv=="": continue
    # wm.print_to_log("завантажуємо файл: "+path_csv)
    rdf.append(load_db(path_csv))
  return rdf


#+end_src

*** DONE get_dates_from_filename_string
CLOSED: [2025-04-09 Wed 20:40]
#+begin_src python
df_list = get_df_from_filename_string(filename)
if not len(df_list)==0:
  print(get_dates_from_colums_list(df_list[0], gv_rlv_colums_name_dates_list))


#+end_src

*** getlist of values from list of string
#+begin_src python :tangle no
# print(gv_rlv_colums_list)
retlist = []
for i, name in enumerate(gv_rlv_colums_name_dates_list):
    # print(i, name, gv_rlv_colums_name_values_list[i]) 
    # print(df.columns.get_loc(gv_rlv_name_date + name))
    # name = "test"
    try:
        colnum = df.columns.get_loc(name)
    except Exception as e:
        print ("on name=", name, " is Exception=", str(e))
        print("Possible reason - file does not contain the expected columns")
        break
    value = df.iloc[0, colnum]
    if pd.isnull(value): break
    retlist.append(value)

    # print(df.iloc[0, df.columns.get_loc(name)])
    # print(df.iloc[1, df.columns.get_loc(name)])
    # print(df.iloc[2, df.columns.get_loc(name)])
print(retlist)


    


#+end_src

*** getvalue
#+begin_src python :tangle no

r = df.iloc[1, 1]

#+end_src

*** prints
#+begin_src python
# print(r)
# print(df.iloc[1, 0])
# print(df.iloc[0, 0])

# print(df.iloc[1, 1])
# print(df.iloc[0, 1])
# print(df.iloc[0, 2])
# print(df.iloc[0])
# print(df)
#+end_src

#+RESULTS:

*** find the column number knowing its name
#+begin_src python :tangle no
# print(r)
# print(df.iloc[1, 0])
print(df.iloc[0, 0])
print(df.columns.get_loc(gv_rlv_name_date + "1"))
# print(df.columns.get_loc(gv_rlv_name_date + "0"))
print(df.columns.get_loc(colmname1))
print(df.columns)
# print(df.iloc[1, 1])
# print(df.iloc[0, 1])
# print(df.iloc[0, 2])
# print(df.iloc[0])
print(df)
#+end_src
# How to find out the number of the column knowing her name?
# or vice versa.

To find the column number knowing its name, you can use the =get_loc= method. To find the column name by its number, you can simply index the columns attribute. Here's how you can do both:

# Get column number by column name
column_name = "Readout date"
column_number = df.columns.get_loc(column_name)

# Get column name by column number
column_index = 1  # replace with your column index
column_name_from_index = df.columns[column_index]

This will give you the column index for a known name and the name for a known index.
*** gpt

# How to find out the number of the column knowing her name?
# or vice versa.


To find the column number knowing its name, you can use the =get_loc= method. To find the column name by its number, you can simply index the columns attribute. Here's how you can do both:

# Get column number by column name
column_name = "Readout date"
column_number = df.columns.get_loc(column_name)

# Get column name by column number
column_index = 1  # replace with your column index
column_name_from_index = df.columns[column_index]

This will give you the column index for a known name and the name for a known index.
* DONE 2024-02-02 rules
CLOSED: [2025-04-01 Tue 22:27]
:PROPERTIES:
:header-args: :tangle no
:END:
*** import
#+begin_src python 
import pandas as pd
#+end_src
*** load_exel
#+begin_src python 
def load_exel(filename, sheet_name): 
    df = pd.read_excel(filename,
                      sheet_name = sheet_name,
                      engine='openpyxl',
                      # index_col=0,
                      header=None,
                      )
    return df

#+end_src

*** переменные
#+begin_src python 
gv_filename = "Data_files/test.xlsx"
sheet_name = "rules"
#+end_src

*** открыть правила
#+begin_src python 
df = load_exel(gv_filename, sheet_name)
print(df)
#+end_src

*** find_ferst_rule_row_next10
#+begin_src python :tangle no
def find_ferst_rule_row_next10(df, start):
    end = start + 10 if start + 10 <= df.shape[0] else df.shape[0]
    for i in range(start, end):
        print("i = ", i)
        value_i = df.iloc[i, 0]
        if value_i == "rule":
            print("found on index = ", i)
            print("value of i = ", value_i)
            return i, True
        continue
    return -1, None
#+end_src

*** найти правило
#+begin_src python :tangle no
print(find_ferst_rule_row_next10(df, 0))

# print(df.shape[0])
print(find_ferst_rule_row_next10(df, 10))
#+end_src

*** размер дата фрейма можно определить
print(df.shape)
возврашается тюпл
первое ровы
второе колумы
*** найти index всех правил
#+begin_src python :tangle no 
def get_all_rules_index(df):
    r = []
    for i in range(0, df.shape[0]):
        print("i = ", i)
        value_i = df.iloc[i, 0]
        if df.iloc[i, 0] == "rule":
            print("rule found on index = ", i)
            print("value of i = ", df.iloc[i, 0])
            r.append(i)
    return r


print (get_all_rules_index(df))
#+end_src

*** получить лист всех правил
#+begin_src python :tangle no 
def get_all_rules_index(df):
    r = []
    for i in range(0, df.shape[0]):
        # print("i = ", i)
        value_i = df.iloc[i, 0]
        if df.iloc[i, 0] == "rule":
            # print("rule found on index = ", i)
            # print("value of i = ", df.iloc[i, 0])
            ruls_name = df.iloc[i, 1]
            ruls_params = df.iloc[i, 2]
            ruls_params_list =[]
            for p in range(3, 3 + ruls_params):
                # print("p = ", p)
                ruls_params_list.append(df.iloc[i, p])
            r.append((i, ruls_name, ruls_params, ruls_params_list))
    return r


print (get_all_rules_index(df))
#+end_src

*** refactor получить лист всех правил
:tangle no 
#+begin_src python 
def get_all_rules_index(df):
    r = []
    for i in range(0, df.shape[0]):
        # print("i = ", i)
        value_i = df.iloc[i, 0]
        if df.iloc[i, 0] == "rule":
            # print("rule found on index = ", i)
            # print("value of i = ", df.iloc[i, 0])
            ruls_name = df.iloc[i, 1]
            ruls_params = df.iloc[i, 2]
            ruls_params_list =[df.iloc[i, p] for p in range(3, 3 + ruls_params)]
            r.append((i, ruls_name, ruls_params_list))
    return r


print (get_all_rules_index(df))
#+end_src

*** тестовая колбек функция
:tangle no 
#+begin_src python 
def postproc_test(arg):
    print(arg)

# postproc_test ([1, 2 ,3])

rules_dic = {
    "test" : postproc_test
}

def use_rule(index, rule_name, rule_params):
    try:
        # print(rules_dic[rule_name])
        rules_dic[rule_name](rule_params)
    except Exception:
        print("no such rule in dictionary from row=",index, " ", rule_name)


use_rule(1, "test", (1,2,3))
use_rule(2, "test_no", (1,2,3))
#+end_src

* DONE 2024-02-01 start
CLOSED: [2025-04-01 Tue 22:28]
:PROPERTIES:
:header-args: :tangle  no
:END:
** Start Source
*** start comment
#+begin_src python 
"""
sandbox
"""

#+end_src
* Command
:PROPERTIES:
:header-args: :tangle  no
:END:
** execute-src-block:
(save-excursion (progn (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
(save-excursion (let () (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
and then name the block you want to execute automatically:

** find-file:
[[elisp:(org-babel-tangle)]]
(find-file-other-frame "D:/Development/version-control/GitHub/my-python/pytts2d/SRC/MouseHandler.py")
(org-babel-tangle)
"D:\Development\version-control\GitHub\My-python\pytts2d\DOCs\Brain\MouseHandler.py control Class org.org" 

** evormnt
python -m venv prime-env

source prime-env/bin/activate
source sontex-env/bin/activate

pip install numpy 
pip install matplotlib
pip install numpy matplotlib
** compile
#+begin_src emacs-lisp :results output silent :tangle no
(pyvenv-activate "sontex-env")
(compile "python -m sandbox")
#+end_src
(read-string
                    (concat
                      "defult(" (buffer-name) "):")
                    (buffer-file-name)
                    nil
                    (buffer-name))

source sontex-env/bin/activate

(compile "source sontex-env/bin/activate ; python -m sandbox")
#+begin_src emacs-lisp :results output silent :tangle no
(compile "source sontex-env/bin/activate ; python -m sandbox")
#+end_src

** auto-tangle-block:
#+NAME: auto-tangle-block
#+begin_src emacs-lisp :results output silent :tangle no
(setq org-src-preserve-indentation t)
(untabify (point-min) (point-max))
;; (save-buffer)
(save-some-buffers 'no-confirm)
(org-babel-tangle)
;; (save-buffer)
;; (save-some-buffers 'no-confirm)
(org-save-all-org-buffers)
(evil-normal-state)
(let ((curent-buffer (buffer-name)))
  (select-frame-by-name "*compilation*")
  (recompile)
  (select-frame-by-name curent-buffer))
(evil-close-fold)

;; (find-file-other-frame "~/INI/babel-cfg.el")
;; (load "~/INI/hydra-cfg.el")
;; (load "~/ELs/BuYn/reader.el")
 #+end_src

*** CANCELED arhiv
CLOSED: [2025-04-02 Wed 18:52]
#+begin_src emacs-lisp :results output silent :tangle no
(setq org-src-preserve-indentation t)
(untabify (point-min) (point-max))
(save-some-buffers 'no-confirm)
;; (save-buffer)
(org-babel-tangle)
(find-file-other-frame "sandbox.py")
(recompile)
;; (load "~/INI/hydra-cfg.el")
;; (load "~/ELs/BuYn/reader.el")
#+end_src

** keys
*** org-mode-map (kbd "<f8>
#+begin_src elisp tangle no
;;  --------------------------------------
(define-key org-mode-map (kbd "<f8>") nil)
(define-key org-mode-map (kbd "<f8> <f8>") '(lambda() (interactive)
        (save-excursion
          (progn
            (org-babel-goto-named-src-block "auto-tangle-block")
            (org-babel-execute-src-block)))
                                ))
;; --------------------------------------
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (save-excursion (progn (org-babel-goto-named-src-block auto-tangle-block) (org-babel-execute-src-block))) |

* 2025-03-19
:PROPERTIES:
:header-args: :tangle  no
:END:
** Necroteuch.org : 
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/../Dropbox/orgs/capture/Necroteuch.org")
#+end_src

    #+RESULTS:
    : #<buffer Necroteuch.org>

** version 1.0
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/Dev/Python/Sontex/DOCs/v1_Stage.org")
#+end_src
** Sontex.org
D:\Development\lisp\Dropbox\Office\Progects\Zmei 
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/../Dropbox/Office/Progects/Zmei/Sontex/Sontex.org")
#+end_src
** sandbox.org
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/Dev/Python/Sontex/DOCs/sandbox.org")
#+end_src

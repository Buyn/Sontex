:PROPERTIES:
:header-args: :tangle no :cmdline arg ; source ../sontex-env/bin/activate
:END:
* Eel files
** index.html
:PROPERTIES:
:header-args: :tangle "../Src/web/index.html" 
:END:
*** file
(find-file-other-frame "../Src/web/index.html")
*** src
**** html open
#+begin_src html
<!DOCTYPE html>  
<html lang="ru">  
#+end_src
**** header
#+begin_src html
<head>  
  <meta charset="UTF-8" />  
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />  
  <meta name="viewport" content="width=device-width,  
initial-scale=1.0" />  
  <title>Sontex</title>  

  <link rel="stylesheet" href="dark.css"/>
  <!-- <link rel="stylesheet" href="light.css"/>   -->
  <link rel="stylesheet" href="style.css"/> 
  <script type="text/javascript" src="../eel.js"></script>  
  <script src="./script.js" defer></script>  
</head>  
#+end_src
**** body
***** body open
#+begin_src html
<body>  
#+end_src
***** Sontex title row
#+begin_src html
  <h1>Програма розрахунку</h1>  
  <!-- <div class="random_number"></div> -->
#+end_src
***** Form
****** Form open
#+begin_src html
  <form id="init-form" action="javascript:">
#+end_src
****** экселе фаил
#+begin_src html
    <div class="row" title="

  Відформатований файл EXEL з усіма необхідними показаннями для формування звіту.
  Основний та головний файл необхідний для звітування.
  Якщо не буде задано вихідний файл, то буде перезаписаний цей файл. Що дозволяє формувати новий звіт за результатами формування попереднього.

">
      <button id="exel-btn">Excel файл</button>  
      <!-- <input type="file" hidden id="exel-file" > -->
      <input type="text" class="long" id="exel-input" name="exel">
    </div>
#+end_src
****** показание устройств
#+begin_src html
    <div class="row" title="

  Файл або файли (розділені символом ;) із показаннями пристроїв у форматі .csv або .rlv.
  Замінює показання пристроїв, отримані з файлу Excel. І формує звіт, на основі нових показників пристроїв.

">
      <button id="csv-btn">Показників пристроїв</button>  
      <input id="csv-input" name="csv" type="text" class="long" >
    </div>
#+end_src
      <!-- <input type="file" hidden id="csv-file" > -->

****** фаил отчёта
#+begin_src html
    <div class="row" title="

  Шлях до місця розташування звіту після формування та ім'я сформованого файлу звіту.
  Клітина може залишитися пустою, де кінцевим файлом буде обрано - вхідний. Результат буде оновлено у цьому файлі.

">
      <button id="output-btn">Файл звіту</button>  
      <input type="text" class="long" id="output-input" name="output">
    </div>
#+end_src

****** Обще домовой счёчик
#+begin_src html
    <div class="row" title="
Показник загальнобудинкового лічильника за звітний/розрахунковий період (Гкал)
">
      <label>
Показник загальнобудинкового лічильника за звітний/розрахунковий період (Гкал)
      </label>
      <input id="curr-count" name="curr-count" type="number" step="any" class="short" placeholder="Гкал">
    </div>
#+end_src

****** Розрахунковий період з - по
#+begin_src html
    <div class="row" title="
Розрахунковий період з - по
">
      <label>
Розрахунковий період з-
      </label>
      <select id="prev-date" name="prev-date">
        <option> R col exel </option>
        <option> S col exel </option>
        <option> 26.11.2024 </option>
        <option> 01.11.2024 </option>
        <option> 01.10.2024 </option>
        <option> 01.09.2024 </option>
        <option> 01.08.2024 </option>
        <option> 01.07.2024 </option>
        <option> 01.06.2024 </option>
        <option> 01.05.2024 </option>
        <option> 01.04.2024 </option>
        <option> 01.03.2024 </option>
        <option> 01.02.2024 </option>
        <option> 01.01.2024 </option>
        <option> 01.12.2023 </option>
        <option> 01.11.2023 </option>
        <option> 01.10.2023 </option>
        <option> 01.09.2023 </option>
        <option> 01.08.2023 </option>
        <option> 01.07.2023 </option>
        <option> 01.06.2023 </option>
        <option> 01.05.2023 </option>
        <option> 01.04.2023 </option>
      </select>
      <label>
  по-
      </label>
      <select id="curr-date" name="curr-date">
        <option> S col exel </option>
        <option> R col exel </option>
        <option> 26.11.2024 </option>
        <option> 01.11.2024 </option>
        <option> 01.10.2024 </option>
        <option> 01.09.2024 </option>
        <option> 01.08.2024 </option>
        <option> 01.07.2024 </option>
        <option> 01.06.2024 </option>
        <option> 01.05.2024 </option>
        <option> 01.04.2024 </option>
        <option> 01.03.2024 </option>
        <option> 01.02.2024 </option>
        <option> 01.01.2024 </option>
        <option> 01.12.2023 </option>
        <option> 01.11.2023 </option>
        <option> 01.10.2023 </option>
        <option> 01.09.2023 </option>
        <option> 01.08.2023 </option>
        <option> 01.07.2023 </option>
        <option> 01.06.2023 </option>
        <option> 01.05.2023 </option>
        <option> 01.04.2023 </option>
      </select>
      <button id="reload"> ⤺ <br> ⤻ </button>
    </div>
#+end_src
****** установки кофицентов
#+begin_src html
    <div class="row" title="
Вкажіть коефіцієнт, Враховувати втрати тепла на МЗК та ФСО
значення 0 за відсутності коефіцієнта.
">
      <label>
        Враховувати втрати тепла на МЗК та ФСО
      </label>
      <input id="mzk-cof" name="mzk-cof" type="number" step="any" class="short" placeholder="0">
      <label>
         МЗК,<br>%
      </label>

      <input id="fso-cof" name="fso-cof" type="number" step="any" class="short" placeholder="0">
      <label>
         ФСО,<br>%
      </label>
    </div>
#+end_src
****** сформировать отчёт
#+begin_src html
      <button id="report-btn">Сформувати звіт</button>  
#+end_src
      <!-- <label> -->
      <!--  <input type="checkbox"> ОСББ -->
      <!-- </label> -->
#+begin_src html
    </div>
#+end_src
****** End Form
#+begin_src html
  </form>
#+end_src
***** log
#+begin_src html
    <textarea name="log" id="log" readonly>
      
      Ласкаво просимо! Почнемо програму.

    </textarea>
#+end_src
***** down row
#+begin_src html
    <div class="logos">
      <a href="https://google.com?q=sontex">
        <img src="sontex.png">
      </a>
      <a href="https://google.com?q=antap">
        <img src="antap.png">
      </a>
    </div>
#+end_src
***** CANCELED report-modal
CLOSED: [2025-03-15 Сб 16:51]
<!-- ** report-modal </h1>:  -->

<!-- <a onclick="getFolder()">GetFolder</a> -->
<!--  </form> -->
<!--  <dialog id="report-modal">   -->
<!--      <input type="text" class="long"> -->
<!--  </dialog>  -->

<!--  <button id="genbutton">Get a Random number using Python</button>   -->

***** body close
#+begin_src html
</body>
#+end_src
**** html close
#+begin_src html
</html>  
#+end_src

** script.js
:PROPERTIES:
:header-args: :tangle "../Src/web/script.js" 
:END:
(find-file-other-frame "../Src/web/script.js")
#+begin_src js :results output silent
// * const : 
const initForm = document.getElementById("init-form");
const cookies = document.cookie.split("; ").map(str => str.split("=")).reduce((obj, [key, value]) => ({...obj, [key]:value}), {});

const logArea = document.getElementById("log");

const useCounterBox = initForm["use-count"];
const prevCounter = initForm["prev-count"];
const currCounter = initForm["curr-count"];

const exelBtn = initForm["exel-btn"];
// const exelFile = initForm["exel-file"];
const exelInput = initForm["exel-input"];

const csvBtn = initForm["csv-btn"];
// const csvFile =  initForm["csv-file"];
const csvInput = initForm["csv-input"];
// console.log(document.cookie);

const outputBtn = initForm[  "output-btn"];
// const outputFile = initForm["output-file"];
const outputInput = initForm["output-input"];

const reportBtn = initForm["report-btn"];
// const reportModal = document.getElementById("report-modal");

// * cookies : 
exelInput.value = cookies.exel || "";
csvInput.value = cookies.csv || "";
outputInput.value = cookies.output || "";

// * onchange : 
useCounterBox.onchange = () => {
    prevCounter.disabled = !useCounterBox.checked;
    currCounter.disabled = !useCounterBox.checked;
}

// * onclick : 
exelBtn.onclick = () => getExel(  exelInput,
                                  ["excel files","*.xlsx"],
                                  "Вибрати файл вхідного звіту");

csvBtn.onclick = () => getDBfile( csvInput,
                                  [["csv files", "*.csv"], ["rlv files", "*.rlv"]],
                                  "Обрати файл показників пристроїв .csv або .rlv");

outputBtn.onclick = () => saveAs( outputInput,
                                  ["excel files","*.xlsx"],
                                  "Зберегти звіт як");

reportBtn.onclick = () => start_calc();

refreshLog();
setInterval(refreshLog, 3000);

// * function getExel :
async function getExel(input, filetype, title) {
    var dosya_path = await eel.btn_ask_open_exel_file(input.value, filetype, title)();
    if (dosya_path) {
        console.log(dosya_path);
        input.value = dosya_path;
        document.cookie = input.name + "=" + dosya_path;
        }
    refreshLog();
    }

// * function getDBfile :
async function getDBfile(input, filetype, title) {
    var dosya_path = await eel.btn_ask_open_DBfiles(input.value, filetype, title)();
    if (dosya_path) {
        console.log(dosya_path);
        input.value = dosya_path;
        document.cookie = input.name + "=" + dosya_path;
        }
    refreshLog();
    }

// * function saveAs :
async function saveAs(input, filetype, title) {
    var dosya_path = await eel.btn_asksaveasfile(input.value, filetype, title)();
    if (dosya_path) {
        console.log(dosya_path);
        input.value = dosya_path;
        document.cookie = input.name + "=" + dosya_path;
        }
    refreshLog();
    }

// * function sendToLog :
function sendToLog(text) {
    logArea.value = text + "\n" + logArea.value;
    }
// * function refreshLog :
async function refreshLog() {
    var log_strings= await eel.pull_log()();
    log_strings.reverse();
    log_strings.forEach(string => sendToLog(string));
    }


// * function start_calc() : 
async function start_calc() {
    console.log("statr calc");
    sendToLog(" ");
    sendToLog(" ");
    sendToLog("--------------------------------------------------");
    // sendToLog(new Date().toISOString().replace("T", " ").slice(0,16));
    sendToLog(new Date());
    sendToLog("Почато розрахунок показників");
    document.cookie = exelInput.name + "=" + exelInput.value;
    document.cookie = csvInput.name + "=" + csvInput.value;
    document.cookie = outputInput.name + "=" + outputInput.value;
    const counterValues = useCounterBox.checked && [currCounter.value, prevCounter.value] || null;
    console.log(counterValues);
    var r = await eel.start_calc(exelInput.value, csvInput.value, outputInput.value, counterValues)();
    refreshLog();
    console.log(exelInput.value);
    console.log(csvInput.value);
    console.log(outputInput.value);
    console.log("result of calc =", r);
    refreshLog();
    await pause(2000);
    sendToLog("Розрахунок показників завершився успішно");
    sendToLog("Результат розрахунку збережено у файлі " + outputInput.value);
    refreshLog();
    // sendToLog(new Date().toISOString().replace("T", " ").slice(0,16));
    sendToLog(new Date());
    sendToLog("==================================================");
    sendToLog(" ");
  }
function pause(delay){
    return new Promise(resolve => setTimeout(resolve, delay));
}
#+end_src

** style.css
:PROPERTIES:
:header-args: :tangle "../Src/web/style.css" 
:END:
(find-file-other-frame "../Src/web/style.css")
#+begin_src css :results output silent
h1 {  
/*  color: green;   */
  text-align: center;  
}

.random_number {  
/*  margin: 50px;   */
/*  font-size: 150px;   */
/*  text-align: center;   */
}  

button {
  /* display: block;   */
  /* margin: 0 auto; */
    white-space: nowrap;
    width: 240px;
}  

#reload {
  padding: 1px;
  width: unset;
  line-height: 0.6;
  align-self: center;
  }


#report-btn {
  /* align: center; */
  display: block;
  /* width: max-content; */
  margin: auto;
}

.row {
    display: flex;
    margin-bottom: 10px;
    gap: 5px;
    align-items: center;
    /* justify-content: space-between; */
    /*    margin-right: 50px; */
}

label {
    /* text-align: right; */
    text-align: left;
}

.long {
    width : 75%;
/*    margin-left: auto; */
}
.short {
   width : 10%;
   margin-left: 15px;
}

.logos {
    margin-top: 20px;
    display: flex;
    justify-content: space-between;
}

.logos img {
    height: 100px;
    /* width: 240px; */
}

#+end_src
* SRC files
** main
*** main.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/Dev/Python/Sontex/Src/main.py")
#+end_src

#+begin_src emacs-lisp :results output silent
(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/Src/main.py")
#+end_src
*** test_main.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/Dev/Python/Sontex/Src/test_main.py")
#+end_src
** appart_values
*** appart_values.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/Dev/Python/Sontex/Src/appart_values.py")
#+end_src
*** test_appart_values.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/Src/test_appart_values.py")
#+end_src
** counter_values
*** counter_values.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/Dev/Python/Sontex/Src/counter_values.py")
#+end_src
*** test_counter_values.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/Src/test_counter_values.py")
#+end_src
** rules
*** rules.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "/home/buyn/Dev/Python/Sontex/Src/rules.py")
#+end_src
*** test_rules.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "/home/buyn/Dev/Python/Sontex/Src/test_rules.py")
#+end_src
** global_values.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "../Src/global_values.py")
#+end_src
(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/Src/global_values.py")
** winmain
*** winmain.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/Dev/Python/Sontex/Src/winmain.py")
#+end_src
*** test_winmain.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/Dev/Python/Sontex/Src/test_winmain.py")
#+end_src
** .projectile
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/Src/.projectile")
#+end_src
** integation test
*** ingtest01.py
:PROPERTIES:
:header-args: :tangle ../Src/ingtest01.py
:END:
**** src ingtest01.py
***** import block:
from main import *
#+begin_src python
import unittest
import sys
import os
import pandas as pd
from winmain import *
# (pyvenv-activate "sontex-env")


#+end_src
***** def load_exel:
#+begin_src python
def load_exel(filename, sheet_name): 
    return pd.read_excel( filename,
                          sheet_name = sheet_name,
                          engine='openpyxl',
                          # index_col=0,
                          header=None,)
#+end_src
***** class Test:
# ** ------------------------------------------:
#+begin_src python
class Test(unittest.TestCase):

#+end_src
***** def test_integ_initest:
  @unittest.skipIf(len(sys.argv) < 2  or sys.argv[1] != "ingtest01.Test.test_integ_initest", "not sigle test")
#+begin_src python
  def test_integ_initest(self):
      # sys.argv = ['', 'Test.testName']
      print(sys.argv)
      print(sys.argv[0])
      # print(sys.argv[1])
      # if sys.argv[1] == "ingtest01.Test.test_integ_initest": print("test found!!")
    

#+end_src
***** def test_run_winmai_calc_exel:
#+begin_src python
  def test_run_winmai_calc_exel(self):
    exel_path = "Data_files/test.xlsx"
    # csv_path = "Data_files/test.rlv"
    csv_path = None
    output_path = "Data_files/test_output.xlsx"
    # /home/buyn/Dev/Python/Sontex/Src/Data_files/output.xlsx
    home_counter = ""
    if os.path.exists(output_path):
      os.remove(output_path)

    self.assertFalse (os.path.exists(output_path), "Output file does exist")
    start_calc(exel_path, csv_path, output_path, home_counter)

    # Assert if the output file exists
    self.assertTrue(os.path.exists(output_path), "Output file does not exist")

    # gv_filename = "Data_files/test.xlsx"
    sheet_name = "Теплоенрго"
    df_report = load_exel(output_path, sheet_name)
    # print(df_report)
    self.assertIsNotNone(df_report )
    self.assertEqual(df_report.iloc[1, 1], "кв.1")
    self.assertEqual(df_report.iloc[1, 4], 2.326)
    self.assertEqual(df_report.shape[0], 41)
    self.assertEqual(df_report.iloc[40, 4], 63.72)

    sheet_name = "квартири, площі"
    df_report = load_exel(output_path, sheet_name)
    # print(df_report)
    self.assertIsNotNone(df_report )
    self.assertEqual(df_report.iloc[7, 1], "кв.7")
    # 8
    self.assertEqual(df_report.iloc[7, 18], 603)
    self.assertEqual(df_report.iloc[7, 17], 653)
    # 31
    self.assertEqual(df_report.iloc[30, 17], 445)
    self.assertEqual(df_report.iloc[30, 18], 437)
    self.assertEqual(df_report.shape[0], 141)
    self.assertEqual(df_report.iloc[109, 17], 1613.72)
    self.assertEqual(df_report.iloc[109, 18], 1550)


#+end_src
***** def test_run_winmai_calc_home:
#+begin_src python
  def test_run_winmai_calc_home(self):
    exel_path = "Data_files/test.xlsx"
    csv_path = ""
    # csv_path = "Data_files/test.rlv"
    # csv_path = "Data_files/test.csv"
    output_path = "Data_files/test_output.xlsx"
    # /home/buyn/Dev/Python/Sontex/Src/Data_files/output.xlsx
    home_counter = [100,0]
    if os.path.exists(output_path):
      os.remove(output_path)

    self.assertFalse (os.path.exists(output_path), "Output file does exist")
    start_calc(exel_path, csv_path, output_path, home_counter)

    # Assert if the output file exists
    self.assertTrue(os.path.exists(output_path), "Output file does not exist")

    # gv_filename = "Data_files/test.xlsx"
    sheet_name = "Теплоенрго"
    df_report = load_exel(output_path, sheet_name)
    # print(df_report)
    self.assertIsNotNone(df_report )
    self.assertEqual(df_report.iloc[1, 1], "кв.1")
    self.assertEqual(df_report.iloc[1, 4], 3.65)
    self.assertEqual(df_report.shape[0], 41)
    self.assertEqual(df_report.iloc[40, 4], 100)

    sheet_name = "квартири, площі"
    df_report = load_exel(output_path, sheet_name)
    # print(df_report)
    self.assertIsNotNone(df_report )
    self.assertEqual(df_report.iloc[7, 1], "кв.7")
    # 8
    self.assertEqual(df_report.iloc[7, 18], 603)
    self.assertEqual(df_report.iloc[7, 17], 653)
    # 31
    self.assertEqual(df_report.iloc[30, 17], 445)
    self.assertEqual(df_report.iloc[30, 18], 437)
    self.assertEqual(df_report.shape[0], 141)
    self.assertEqual(df_report.iloc[109, 17], 100)
    self.assertEqual(df_report.iloc[109, 18], 0)


#+end_src
***** def test_run_winmai_calc_rlv:
#+begin_src python
  def test_run_winmai_calc_rlv(self):
    exel_path = "Data_files/test.xlsx"
    # csv_path = ""
    csv_path = "Data_files/test.rlv"
    # csv_path = "Data_files/test.csv"
    output_path = "Data_files/test_output.xlsx"
    # /home/buyn/Dev/Python/Sontex/Src/Data_files/output.xlsx
    home_counter = None
    if os.path.exists(output_path):
      os.remove(output_path)

    self.assertFalse (os.path.exists(output_path), "Output file does exist")
    start_calc(exel_path, csv_path, output_path, home_counter)

    # Assert if the output file exists
    self.assertTrue(os.path.exists(output_path), "Output file does not exist")

    # gv_filename = "Data_files/test.xlsx"
    sheet_name = "Теплоенрго"
    df_report = load_exel(output_path, sheet_name)
    # print(df_report)
    self.assertIsNotNone(df_report )
    self.assertEqual(df_report.iloc[1, 1], "кв.1")
    self.assertEqual(df_report.iloc[1, 4], 2.326)
    self.assertEqual(df_report.shape[0], 41)
    self.assertEqual(df_report.iloc[40, 4], 63.72)

    sheet_name = "квартири, площі"
    df_report = load_exel(output_path, sheet_name)
    # print(df_report)
    self.assertIsNotNone(df_report )
    self.assertEqual(df_report.iloc[7, 1], "кв.7")
    # 8
    self.assertEqual(df_report.iloc[7, 18], 603)
    self.assertEqual(df_report.iloc[7, 17], 653)
    # 31
    self.assertEqual(df_report.iloc[30, 17], 195)
    self.assertEqual(df_report.iloc[30, 18], 437)
    self.assertEqual(df_report.shape[0], 141)
    self.assertEqual(df_report.iloc[109, 17], 1613.72)
    self.assertEqual(df_report.iloc[109, 18], 1550)


#+end_src
***** def test_run_winmai_calc_rlv_csv:
#+begin_src python
  def test_run_winmai_calc_rlv_csv(self):
    exel_path = "Data_files/test.xlsx"
    # csv_path = ""
    csv_path = "Data_files/test.rlv;Data_files/test.csv"
    # csv_path = "Data_files/test.csv"
    output_path = "Data_files/test_output.xlsx"
    # /home/buyn/Dev/Python/Sontex/Src/Data_files/output.xlsx
    home_counter = None
    if os.path.exists(output_path):
      os.remove(output_path)
    # Assert if the output file exists
    self.assertFalse (os.path.exists(output_path), "Output file does exist")
    start_calc(exel_path, csv_path, output_path, home_counter)
    # Assert if the output file not exists
    self.assertTrue(os.path.exists(output_path), "Output file does not exist")
    # gv_filename = "Data_files/test.xlsx"
    sheet_name = "Теплоенрго"
    df_report = load_exel(output_path, sheet_name)
    # print(df_report)
    self.assertIsNotNone(df_report )
    self.assertEqual(df_report.iloc[1, 1], "кв.1")
    self.assertEqual(df_report.iloc[1, 4], 2.326)
    self.assertEqual(df_report.shape[0], 41)
    self.assertEqual(df_report.iloc[40, 4], 63.72)
    sheet_name = "квартири, площі"
    df_report = load_exel(output_path, sheet_name)
    # print(df_report)
    self.assertIsNotNone(df_report )
    self.assertEqual(df_report.iloc[7, 1], "кв.7")
    # 8
    self.assertEqual(df_report.iloc[7, 18], 603)
    self.assertEqual(df_report.iloc[7, 17], 126)
    # 31
    self.assertEqual(df_report.iloc[30, 17], 76)
    self.assertEqual(df_report.iloc[30, 18], 437)
    self.assertEqual(df_report.shape[0], 141)
    self.assertEqual(df_report.iloc[109, 17], 1613.72)
    self.assertEqual(df_report.iloc[109, 18], 1550)


#+end_src
***** Test runer:
# * Test runer : 
# ** ------------------------------------------:
# (compile " D:/Development/version-control/GitHub/Vadim/Tochil/main_test.py -k init")
# (compile " python -m unittest D:/Development/version-control/GitHub/Vadim/Tochil/main_test.py ")
# ** if __main__: 
    # runner = unittest.TextTestRunner()
    # runner.run(suite_Init())
    # sys.argv = ['', 'Test.testName']
    import sys
    print("args = ", sys.argv)
#+begin_src python
if __name__ == "__main__":
    print("args = ", sys.argv)
    unittest.main()
#+end_src
**** file
(find-file-other-frame "../Src/ingtest01.py")
**** run
***** compile
#+begin_src emacs-lisp :results output silent :tangle no
(pyvenv-activate "sontex-env")
(compile "python ../Src/ingtest01.py")
(find-file-other-frame "../Src/ingtest01.py")
#+end_src

source sontex-env/bin/activate
(compile "source sontex-env/bin/activate ; python -m sandbox")
#+begin_src emacs-lisp :results output silent :tangle no
(compile "source sontex-env/bin/activate ; python -m sandbox")
#+end_src
***** single test run
#+begin_src emacs-lisp :results output silent :tangle no
(pyvenv-activate "sontex-env")
(compile "python3 -m unittest ../Src/ingtest01.Test.test_integ_initest")
(find-file-other-frame "../Src/ingtest01.py")
#+end_src

* sandbox
** sandbox.org
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "../Src/sandbox.org")
#+end_src

(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/Src/sandbox.org")
** sandbox.py
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "../Src/sandbox.py")
#+end_src
* scripts
:PROPERTIES:
:header-args: :dir ../Src/ :shebang #!/bin/bash  :tangle-mode (identity #o755) :tangle no
:END:
** start
*** search
#+HEADER: :tangle ../Src/Start.sh
#+begin_src sh 
source sontex-env/bin/activate
python main.py
#+end_src

** test all
*** win
@echo off
:start
python -m unittest
pause
cls
goto :start
*** sh
# python main.py
#+HEADER: :tangle ../Src/test_all.sh
#+begin_src sh 
clear
source sontex-env/bin/activate
# @echo off
while true; do
  python -m unittest
  echo "Press any key to run tests again or Ctrl+C to exit..."
  read -n 1 -s
  clear
done
#+end_src
** integr test
*** sh
# python main.py
#+HEADER: :tangle ../Src/test_integr.sh
#+begin_src sh 
clear
source sontex-env/bin/activate
# @echo off
while true; do
  # python -m unittest
  python3 -m unittest ingtest01
  python3 -m unittest test_winmain.Test_Init 
  # python3 -m unittest test_winmain.Test_Init.test_btn_ask_open_exel_file 
  # python3 -m unittest test_winmain.Test_Init.test_btn_ask_open_DBfiles 
  # python3 -m unittest test_winmain.Test_Init.test_btn_asksaveasfile
  echo "Press any key to run tests again or Ctrl+C to exit..."
  read -n 1 -s
  clear
done
#+end_src
* arhiv
* Commands
:PROPERTIES:
:header-args: :tangle  no
:END:
** execute-src-block:
(save-excursion (progn (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
(save-excursion (let () (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
and then name the block you want to execute automatically:

** find-file:
[[elisp:(org-babel-tangle)]]
(find-file-other-frame "D:/Development/version-control/GitHub/my-python/pytts2d/SRC/MouseHandler.py")
(org-babel-tangle)
"D:\Development\version-control\GitHub\My-python\pytts2d\DOCs\Brain\MouseHandler.py control Class org.org" 

** evormnt
python -m venv prime-env

source sontex-env/bin/activate

pip install eel
pip install openpyxl

pip install numpy 
pip install matplotlib
pip install numpy matplotlib
** compile
#+begin_src emacs-lisp :results output silent :tangle no
(pyvenv-activate "sontex-env")
(compile "python -m sandbox")
#+end_src
(read-string
                    (concat
                      "defult(" (buffer-name) "):")
                    (buffer-file-name)
                    nil
                    (buffer-name))

source sontex-env/bin/activate

(compile "source sontex-env/bin/activate ; python -m sandbox")
#+begin_src emacs-lisp :results output silent :tangle no
(compile "source sontex-env/bin/activate ; python -m sandbox")
#+end_src

** auto-tangle-block:
#+NAME: auto-tangle-block
#+begin_src emacs-lisp :results output silent :tangle no
(setq org-src-preserve-indentation t)
(untabify (point-min) (point-max))
;; (save-buffer)
(save-some-buffers 'no-confirm)
;; (universal-argument)
;; (universal-argument)
(org-babel-tangle)
;; (save-buffer)
;; (save-some-buffers 'no-confirm)
(org-save-all-org-buffers)
(evil-normal-state)
(let ((curent-buffer (buffer-name)))
  (select-frame-by-name "*compilation*")
  (recompile)
  (select-frame-by-name curent-buffer))
(evil-close-fold)

;; (find-file-other-frame "~/INI/babel-cfg.el")
;; (load "~/INI/hydra-cfg.el")
;; (load "~/ELs/BuYn/reader.el")
 #+end_src
*** CANCELED arhiv
CLOSED: [2025-04-02 Wed 18:52]
#+begin_src emacs-lisp :results output silent :tangle no
(setq org-src-preserve-indentation t)
(untabify (point-min) (point-max))
(save-some-buffers 'no-confirm)
;; (save-buffer)
(org-babel-tangle)
(find-file-other-frame "sandbox.py")
(recompile)
;; (load "~/INI/hydra-cfg.el")
;; (load "~/ELs/BuYn/reader.el")
#+end_src

** keys
*** org-mode-map (kbd "<f8>
#+begin_src elisp tangle no
;;  --------------------------------------
(define-key org-mode-map (kbd "<f8>") nil)
(define-key org-mode-map (kbd "<f8> <f8>") '(lambda() (interactive)
        (save-excursion
          (progn
            (org-babel-goto-named-src-block "auto-tangle-block")
            (org-babel-execute-src-block)))
                                ))
;; --------------------------------------
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (save-excursion (progn (org-babel-goto-named-src-block auto-tangle-block) (org-babel-execute-src-block))) |

* 2024-09-06
** Sontex.org
D:\Development\lisp\Dropbox\Office\Progects\Zmei 
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/Dropbox/Office/Progects/Zmei/Sontex/Sontex.org")
#+end_src

** main.org
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/Dev/Python/Sontex/DOCs/main.org")
#+end_src

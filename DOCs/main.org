:PROPERTIES:
:header-args: :tangle no :cmdline arg ; source ../sontex-env/bin/activate
:END:
* Eel files
** index.html
:PROPERTIES:
:header-args: :tangle "../Src/web/index.html" 
:END:
(find-file-other-frame "../Src/web/index.html")
#+begin_src emacs-lisp :results output silent
<!-- * html </h1> -->  
<!DOCTYPE html>  
<html lang="ru">  
<!-- * header </h1> -->  
<head>  
  <meta charset="UTF-8" />  
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />  
  <meta name="viewport" content="width=device-width,  
initial-scale=1.0" />  
  <title>Sontex</title>  

  <link rel="stylesheet" href="dark.css"/>
  <!-- <link rel="stylesheet" href="light.css"/>   -->
  <link rel="stylesheet" href="style.css"/> 
  <script type="text/javascript" src="../eel.js"></script>  
  <script src="./script.js" defer></script>  
</head>  
<!-- * body : </h1> -->
<body>  
<!-- ** Sontex </h1>  :  -->
  <h1>Програма розрахунку</h1>  
  <!-- <div class="random_number"></div> -->
<!-- ** Form open :  </h1> -->
  <form id="init-form" action="javascript:">
<!-- ** Обще домовой счёчик :  </h1> -->
    <div class="row" title="
    
  Якщо встановлено позначку, тоді обираються показники загальнобудинкового лічильника, замість значень з Excel.
  Й нові показники оновляться у файлі звіту.

">
      <label>
        <input id="use-count" name="use-count" type="checkbox">
        Показник загальнобудинкового лічильника <br> (ігнорувати з ексель)
      </label>
      <input id="curr-count" name="curr-count" type="number" step="any" class="short" placeholder="поточний" disabled>
      <input id="prev-count" name="prev-count" type="number" step="any" class="short" placeholder="попередній" disabled>
    </div>
<!-- ** экселе фаил :  </h1> -->
    <div class="row" title="

  Відформатований файл EXEL з усіма необхідними показаннями для формування звіту.
  Основний та головний файл необхідний для звітування.
  Якщо не буде задано вихідний файл, то буде перезаписаний цей файл. Що дозволяє формувати новий звіт за результатами формування попереднього.

">
      <button id="exel-btn">Excel файл</button>  
      <!-- <input type="file" hidden id="exel-file" > -->
      <input type="text" class="long" id="exel-input" name="exel">
    </div>
<!-- ** показание устройств :  </h1> -->
    <div class="row" title="

  Файл або файли (розділені символом ;) із показаннями пристроїв у форматі .csv або .rlv.
  Замінює показання пристроїв, отримані з файлу Excel. І формує звіт, на основі нових показників пристроїв.

">
      <button id="csv-btn">Показників пристроїв</button>  
      <!-- <input type="file" hidden id="csv-file" > -->
      <input id="csv-input" name="csv" type="text" class="long" >
    </div>
<!-- ** фаил отчёта :  </h1> -->
    <div class="row" title="

  Шлях до місця розташування звіту після формування та ім'я сформованого файлу звіту.
  Клітина може залишитися пустою, де кінцевим файлом буде обрано - вхідний. Результат буде оновлено у цьому файлі.

">
      <button id="output-btn">Файл звіту</button>  
      <input type="text" class="long" id="output-input" name="output">
    </div>
    <div class="row">
<!-- ** сформировать отчёт </h1>: -->
      <button id="report-btn">Сформувати звіт</button>  
      <!-- <label> -->
      <!--  <input type="checkbox"> ОСББ -->
      <!-- </label> -->
    </div>
<!-- ** End Form </h1>: -->
  </form>
<!-- ** log </h1> :  -->
    <textarea name="log" id="log" readonly>
      
      Ласкаво просимо! Почнемо програму.

    </textarea>
<!-- ** logo row :  -->
    <div class="logos">
      <a href="https://google.com?q=sontex">
        <img src="sontex.png">
      </a>
      <a href="https://google.com?q=antap">
        <img src="antap.png">
      </a>
    </div>

<!-- ** report-modal </h1>:  -->
<!-- <a onclick="getFolder()">GetFolder</a> -->
<!--  </form> -->
<!--  <dialog id="report-modal">   -->
<!--      <input type="text" class="long"> -->
<!--  </dialog>  -->

<!--  <button id="genbutton">Get a Random number using Python</button>   -->
<!-- </body>   -->

<!-- * close html </h1> -->  
</html>  
#+end_src

** script.js
:PROPERTIES:
:header-args: :tangle "../Src/web/script.js" 
:END:
(find-file-other-frame "../Src/web/script.js")
#+begin_src emacs-lisp :results output silent
// * const : 
const initForm = document.getElementById("init-form");
const cookies = document.cookie.split("; ").map(str => str.split("=")).reduce((obj, [key, value]) => ({...obj, [key]:value}), {});

const logArea = document.getElementById("log");

const useCounterBox = initForm["use-count"];
const prevCounter = initForm["prev-count"];
const currCounter = initForm["curr-count"];

const exelBtn = initForm["exel-btn"];
// const exelFile = initForm["exel-file"];
const exelInput = initForm["exel-input"];

const csvBtn = initForm["csv-btn"];
// const csvFile =  initForm["csv-file"];
const csvInput = initForm["csv-input"];
// console.log(document.cookie);

const outputBtn = initForm[  "output-btn"];
// const outputFile = initForm["output-file"];
const outputInput = initForm["output-input"];

const reportBtn = initForm["report-btn"];
// const reportModal = document.getElementById("report-modal");

// * cookies : 
exelInput.value = cookies.exel || "";
csvInput.value = cookies.csv || "";
outputInput.value = cookies.output || "";

// * onchange : 
useCounterBox.onchange = () => {
    prevCounter.disabled = !useCounterBox.checked;
    currCounter.disabled = !useCounterBox.checked;
}

// * onclick : 
exelBtn.onclick = () => getExel(  exelInput,
                                  ["excel files","*.xlsx"],
                                  "Вибрати файл вхідного звіту");

csvBtn.onclick = () => getDBfile( csvInput,
                                  [["csv files", "*.csv"], ["rlv files", "*.rlv"]],
                                  "Обрати файл показників пристроїв .csv або .rlv");

outputBtn.onclick = () => saveAs( outputInput,
                                  ["excel files","*.xlsx"],
                                  "Зберегти звіт як");

reportBtn.onclick = () => start_calc();

refreshLog();
setInterval(refreshLog, 3000);

// * function getExel :
async function getExel(input, filetype, title) {
    var dosya_path = await eel.btn_ask_open_exel_file(input.value, filetype, title)();
    if (dosya_path) {
        console.log(dosya_path);
        input.value = dosya_path;
        document.cookie = input.name + "=" + dosya_path;
        }
    refreshLog();
    }

// * function getDBfile :
async function getDBfile(input, filetype, title) {
    var dosya_path = await eel.btn_ask_open_DBfiles(input.value, filetype, title)();
    if (dosya_path) {
        console.log(dosya_path);
        input.value = dosya_path;
        document.cookie = input.name + "=" + dosya_path;
        }
    refreshLog();
    }

// * function saveAs :
async function saveAs(input, filetype, title) {
    var dosya_path = await eel.btn_asksaveasfile(input.value, filetype, title)();
    if (dosya_path) {
        console.log(dosya_path);
        input.value = dosya_path;
        document.cookie = input.name + "=" + dosya_path;
        }
    refreshLog();
    }

// * function sendToLog :
function sendToLog(text) {
    logArea.value = text + "\n" + logArea.value;
    }
// * function refreshLog :
async function refreshLog() {
    var log_strings= await eel.pull_log()();
    log_strings.reverse();
    log_strings.forEach(string => sendToLog(string));
    }


// * function start_calc() : 
async function start_calc() {
    console.log("statr calc");
    sendToLog(" ");
    sendToLog(" ");
    sendToLog("--------------------------------------------------");
    // sendToLog(new Date().toISOString().replace("T", " ").slice(0,16));
    sendToLog(new Date());
    sendToLog("Почато розрахунок показників");
    document.cookie = exelInput.name + "=" + exelInput.value;
    document.cookie = csvInput.name + "=" + csvInput.value;
    document.cookie = outputInput.name + "=" + outputInput.value;
    const counterValues = useCounterBox.checked && [currCounter.value, prevCounter.value] || null;
    console.log(counterValues);
    var r = await eel.start_calc(exelInput.value, csvInput.value, outputInput.value, counterValues)();
    refreshLog();
    console.log(exelInput.value);
    console.log(csvInput.value);
    console.log(outputInput.value);
    console.log("result of calc =", r);
    refreshLog();
    await pause(2000);
    sendToLog("Розрахунок показників завершився успішно");
    sendToLog("Результат розрахунку збережено у файлі " + outputInput.value);
    refreshLog();
    // sendToLog(new Date().toISOString().replace("T", " ").slice(0,16));
    sendToLog(new Date());
    sendToLog("==================================================");
    sendToLog(" ");
  }
function pause(delay){
    return new Promise(resolve => setTimeout(resolve, delay));
}
#+end_src

** style.css : 
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "D:/Development/version-control/GitHub/Zmei/Sontex/Src/web/style.css")
#+end_src
* 2024-09-06
** Sontex.org
D:\Development\lisp\Dropbox\Office\Progects\Zmei 
#+begin_src emacs-lisp :results output silent
(find-file-other-frame "~/Dropbox/Office/Progects/Zmei/Sontex/Sontex.org")
#+end_src
